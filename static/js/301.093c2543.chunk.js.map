{"version":3,"file":"static/js/301.093c2543.chunk.js","mappings":"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","sources":["pages/AdminOrders/AdminOrders.js","CustomHooks/useFetchAllOrders.js","pages/Checkout/checkout.style.js","pages/UserOrders/user-orders.style.js","redux/reducers/order/order.actions.js","querries/order.querries.js","querries/payment.querries.js","redux/reducers/order/order.selectors.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateOrder } from \"../../querries/order.querries\";\nimport { selectAllOrders } from \"../../redux/reducers/order/order.selectors\";\nimport { selectUserToken } from \"../../redux/reducers/user/user.selectors\";\nimport CustomButton from \"../../components/CustoButton/CustomButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope, faPhone } from \"@fortawesome/pro-duotone-svg-icons\";\nimport { UserOrderContainer } from \"../UserOrders/user-orders.style\";\nimport { NoItemMessage } from \"../Checkout/checkout.style\";\nimport { Link } from \"react-router-dom\";\nimport { refundPayment } from \"../../querries/payment.querries\";\nimport { useFetchAllOrders } from \"../../CustomHooks/useFetchAllOrders\";\nimport { selectOriginAddress } from \"../../redux/reducers/app/app.selectors\";\nconst AdminOrders = () => {\n  const token = useSelector(selectUserToken);\n  const dispatch = useDispatch();\n  const origin = useSelector(selectOriginAddress);\n  const allOrders = useSelector(selectAllOrders);\n\n  useFetchAllOrders();\n\n  const handleOrderStatus = (order) => {\n    const update = { ...order };\n\n    if (order.status === \"PAYEE\") {\n      update.status = \"LIVREE\";\n    }\n    if (order.status === \"ATTENTE_PAIEMENT\") {\n      update.status = \"LIVREE\";\n    }\n    if (\n      order.status === \"ATTENTE_PAIEMENT\" &&\n      order.deliveryMode === \"EMPORTER\"\n    ) {\n      update.status = \"RECUPEREE\";\n    }\n\n    updateOrder(token, update, dispatch);\n  };\n\n  const handleRefundPayment = (orderId, paymentIntent) => {\n    refundPayment(token, orderId, paymentIntent, dispatch);\n  };\n\n  return allOrders.length ? (\n    <div style={{ width: \"100%\" }}>\n      <table style={{ textAlign: \"center\", width: \"100%\" }}>\n        <thead>\n          <tr>\n            <th>Client</th>\n            <th>Date</th>\n            <th>Telephone</th>\n            <th>Mail</th>\n            <th>Status</th>\n            <th>Mode</th>\n            <th>Adresse</th>\n            <th>Commande</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {allOrders &&\n            allOrders.map((order) => (\n              <tr key={order._id}>\n                <td>\n                  {order.user.firstname} {order.user.lastname}\n                </td>\n                <td>{order.date}</td>\n                <td>\n                  <a href={`tel:${order.user.phone}`}>\n                    <FontAwesomeIcon icon={faPhone} />\n                  </a>\n                </td>\n                <td>\n                  <a href={`mailto:${order.user.email}`}>\n                    <FontAwesomeIcon icon={faEnvelope} />\n                  </a>\n                </td>\n                <td>{order.status}</td>\n                <td>{order.deliveryMode}</td>\n                <td>\n                  <a\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    href={`https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${order.deliveryAddress}&travelmode=driving`}\n                  >\n                    {order.deliveryAddress}\n                  </a>\n                </td>\n                <td>\n                  <ul style={{ listStyle: \"none\" }}>\n                    {order.products.map(({ quantity, name }, index) => (\n                      <li key={order._id + index}>\n                        {name} x {quantity}\n                      </li>\n                    ))}\n                  </ul>\n                </td>\n                <td>\n                  {order.deliveryMode !== \"EMPORTER\" && (\n                    <CustomButton\n                      type=\"button\"\n                      onClick={() => handleOrderStatus(order)}\n                    >\n                      Livrée / Payée\n                    </CustomButton>\n                  )}\n                  {order.deliveryMode === \"EMPORTER\" && (\n                    <CustomButton\n                      type=\"button\"\n                      onClick={() => handleOrderStatus(order)}\n                    >\n                      Commande Récuperée\n                    </CustomButton>\n                  )}\n                  {order.paymentIntent && (\n                    <CustomButton\n                      type=\"button\"\n                      negative\n                      onClick={() =>\n                        handleRefundPayment(order._id, order.paymentIntent)\n                      }\n                    >\n                      Rembourser la commande\n                    </CustomButton>\n                  )}\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  ) : (\n    <UserOrderContainer>\n      <NoItemMessage>\n        Vous n'avez pas de commandes pour le moment\n        <Link to=\"/\">Retour à l'accueil</Link>\n      </NoItemMessage>\n    </UserOrderContainer>\n  );\n};\n\nexport default AdminOrders;\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAllOrders } from \"../querries/order.querries\";\nimport { selectUserToken } from \"../redux/reducers/user/user.selectors\";\n\nexport const useFetchAllOrders = () => {\n  const [mounted, setMounted] = useState(false);\n  const dispatch = useDispatch();\n  const token = useSelector(selectUserToken);\n  let interval;\n  useEffect(() => {\n    setMounted(true);\n    if (mounted) {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      interval = setInterval(async () => {\n        await fetchAllOrders(token, dispatch);\n      }, 3000);\n      // on fetch les commandes toutes les 10 secondes\n    }\n    return () => {\n      setMounted(false);\n      clearInterval(interval);\n    };\n  }, [token, mounted]);\n};\n","import styled from \"styled-components\";\n\nexport const CheckoutContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const CheckoutTitle = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  h2 {\n    width: 50%;\n  }\n  span {\n    display: inline-block;\n    font-weight: bold;\n    font-size: 1.3em;\n  }\n`;\n\nexport const NoItemMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 80vh;\n`;\n","import styled from \"styled-components\";\n\nexport const UserOrderContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n","import { orderActionTypes } from \"./order.types\";\n\nexport const getOrdersByUserId = (orders) => ({\n  type: orderActionTypes.GET_ORDERS_BY_USER_ID,\n  payload: orders,\n});\n\nexport const getAllOrders = (orders) => ({\n  type: orderActionTypes.GET_ALL_ORDERS,\n  payload: orders,\n});\n\nexport const getAllRawOrders = (orders) => ({\n  type: orderActionTypes.GET_ALL_RAW_ORDERS,\n  payload: orders,\n});\n","import axios from \"axios\";\nimport { setMessage, toggleLoading } from \"../redux/reducers/app/app.actions\";\nimport { emptyCart } from \"../redux/reducers/cart/cart.actions\";\nimport {\n  getAllOrders,\n  getAllRawOrders,\n  getOrdersByUserId,\n} from \"../redux/reducers/order/order.actions\";\nimport { localServerURI } from \"../_consts/server/server\";\n\nexport const fetchOrdersByUserId = async (userId, token, dispatch) => {\n  dispatch(toggleLoading());\n  try {\n    const response = await axios({\n      method: \"GET\",\n      url: `${localServerURI}/api/orders/${userId}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const {\n      data: { orders, message },\n    } = response;\n    dispatch(toggleLoading());\n    dispatch(getOrdersByUserId(orders));\n    dispatch(setMessage({ status: \"success\", message: message }));\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const fetchAllOrders = async (token, dispatch) => {\n  try {\n    const response = await axios({\n      method: \"GET\",\n      url: `${localServerURI}/api/orders/all`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    const {\n      data: { orders },\n    } = response;\n\n    dispatch(getAllOrders(orders));\n  } catch (error) {\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const fetchAllRawOrders = async (token, dispatch) => {\n  dispatch(toggleLoading());\n  try {\n    const response = await axios({\n      method: \"GET\",\n      url: `${localServerURI}/api/orders/all-raw`,\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    const {\n      data: { orders },\n    } = response;\n\n    dispatch(getAllRawOrders(orders));\n    dispatch(toggleLoading());\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const createOrder = async (token, order, dispatch, navigate) => {\n  dispatch(toggleLoading());\n  const { products, ...others } = order;\n  let newOrder = {\n    ...others,\n    products: products.map(({ _id, quantity, name, price }) => ({\n      _id,\n      quantity,\n      name,\n      price,\n    })),\n  };\n  try {\n    const response = await axios({\n      method: \"POST\",\n      url: `${localServerURI}/api/orders/add`,\n      data: { order: newOrder },\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const {\n      data: { message },\n    } = response;\n    dispatch(toggleLoading());\n    dispatch(setMessage({ status: \"success\", message: message }));\n    dispatch(emptyCart());\n    navigate(\"/vos-commandes\");\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const updateOrder = async (token, update, dispatch) => {\n  dispatch(toggleLoading());\n  try {\n    const response = await axios({\n      method: \"POST\",\n      url: `${localServerURI}/api/orders/update`,\n      data: { update },\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const {\n      data: { message },\n    } = response;\n    dispatch(toggleLoading());\n    dispatch(setMessage({ status: \"success\", message: message }));\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n","import axios from \"axios\";\nimport { setMessage, toggleLoading } from \"../redux/reducers/app/app.actions\";\nimport { emptyCart } from \"../redux/reducers/cart/cart.actions\";\nimport { setClientSecret } from \"../redux/reducers/payment/payment.actions\";\nimport { localServerURI } from \"../_consts/server/server\";\n\nexport const createPaymentIntent = async (\n  userToken,\n  cart,\n  dispatch,\n  navigate\n) => {\n  dispatch(toggleLoading());\n  try {\n    const response = await axios({\n      method: \"POST\",\n      url: `${localServerURI}/api/payment/create-payment-intent`,\n      headers: { Authorization: `Bearer ${userToken}` },\n      data: { items: cart },\n    });\n\n    dispatch(toggleLoading());\n    const {\n      data: { clientSecret },\n    } = response;\n    dispatch(setClientSecret(clientSecret));\n  } catch (error) {\n    dispatch(toggleLoading());\n    if (error.response.data === \"Unauthorized\") {\n      dispatch(\n        setMessage({\n          status: \"error\",\n          message: \"Vous devez être connécté pour passer une commande\",\n        })\n      );\n      navigate(\"/connexion\");\n    } else {\n      dispatch(\n        setMessage({\n          status: \"error\",\n          message: error.response.data.message,\n        })\n      );\n    }\n    navigate(\"/\");\n    dispatch(emptyCart());\n  }\n};\n\nexport const refundPayment = async (\n  token,\n  orderId,\n  paymentIntent,\n  dispatch\n) => {\n  dispatch(toggleLoading());\n  try {\n    const response = await axios({\n      method: \"POST\",\n      url: `${localServerURI}/api/payment/refund-payment`,\n      headers: { Authorization: `Bearer ${token}` },\n      data: { orderId, paymentIntent },\n    });\n    const {\n      data: { message },\n    } = response;\n    dispatch(toggleLoading());\n    dispatch(setMessage({ status: \"success\", message }));\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({\n        status: \"error\",\n        message: error.response.data.message,\n      })\n    );\n  }\n};\n","import { createSelector } from \"reselect\";\n\nconst selectOrder = (state) => state.order;\n\nexport const selectOrdersByUserId = createSelector(\n  [selectOrder],\n  (order) => order.userOrders\n);\n\nexport const selectAllOrders = createSelector(\n  [selectOrder],\n  (order) => order.allOrders\n);\n\nexport const selectAllRawOrders = createSelector(\n  [selectOrder],\n  (order) => order.rawOrders\n);\n"],"names":["token","useSelector","selectUserToken","dispatch","useDispatch","origin","selectOriginAddress","allOrders","selectAllOrders","interval","useState","mounted","setMounted","useEffect","setInterval","fetchAllOrders","clearInterval","useFetchAllOrders","handleOrderStatus","order","update","status","deliveryMode","updateOrder","length","style","width","textAlign","map","user","firstname","lastname","date","href","phone","icon","faPhone","email","faEnvelope","rel","target","deliveryAddress","listStyle","products","index","quantity","name","_id","CustomButton","type","onClick","paymentIntent","negative","orderId","refundPayment","to","CheckoutContainer","styled","CheckoutTitle","NoItemMessage","UserOrderContainer","getOrdersByUserId","orders","orderActionTypes","payload","getAllOrders","getAllRawOrders","fetchOrdersByUserId","userId","toggleLoading","axios","method","url","localServerURI","headers","Authorization","response","data","message","setMessage","fetchAllRawOrders","createOrder","navigate","others","newOrder","price","emptyCart","createPaymentIntent","userToken","cart","items","clientSecret","setClientSecret","selectOrder","state","selectOrdersByUserId","createSelector","userOrders","selectAllRawOrders","rawOrders"],"sourceRoot":""}