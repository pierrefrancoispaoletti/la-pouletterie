{"version":3,"file":"static/js/384.c02a3cf7.chunk.js","mappings":"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","sources":["pages/AdminReports/AdminReports.js","CustomHooks/useFetchRawOrders.js","redux/reducers/order/order.actions.js","querries/order.querries.js","redux/reducers/order/order.selectors.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useFetchAllRawOrders } from \"../../CustomHooks/useFetchRawOrders\";\nimport { selectAllRawOrders } from \"../../redux/reducers/order/order.selectors\";\n\nconst AdminReports = () => {\n  useFetchAllRawOrders();\n  const rawOrders = useSelector(selectAllRawOrders);\n  const [args, setArgs] = useState({\n    deliveryMode: \"\",\n    status: \"\",\n    date: \"\",\n    user: \"\",\n  });\n\n  const generateArrayOfYear = () => {\n    let min = new Date().getFullYear();\n    let max = min + 10;\n    let years = [];\n    years.push(min - 1);\n    for (let index = min; index <= max; index++) {\n      years.push(index);\n    }\n    return years;\n  };\n\n  const generateArrayofMonth = () => {\n    return Array.from({ length: 12 }, (item, index) => {\n      return `${new Date(0, index).toLocaleDateString(\"fr-FR\", {\n        month: \"long\",\n      })} ${new Date().getFullYear()}`;\n    });\n  };\n\n  const filteringFunction = useCallback(\n    () =>\n      rawOrders.filter((obj) => {\n        for (const key in args) {\n          if (key !== \"user\") {\n            if (obj[key] === undefined || !obj[key]?.includes(args[key])) {\n              return false;\n            }\n          } else {\n            const username = `${obj[key][\"lastname\"]} ${obj[key][\"firstname\"]}`;\n            if (username === undefined || !username.includes(args[key])) {\n              return false;\n            }\n          }\n        }\n        return obj;\n      }),\n    [args, rawOrders]\n  );\n  const computeAmountOfOrder = useCallback(({ products, status }) => {\n    let computedAmount = products\n      .reduce(\n        (acc, amt) =>\n          status !== \"REMBOURSEE\"\n            ? acc + amt._id.price * amt.quantity\n            : acc - amt._id.price * amt.quantity,\n        0\n      )\n      .toFixed(2);\n    return computedAmount;\n  }, []);\n\n  const computeTotalAmount = useCallback(() => {\n    const totalAmount = filteringFunction()\n      .flatMap((order) => order.products)\n      .reduce((acc, amt) => acc + amt._id.price * amt.quantity, 0);\n\n    const totalRefundedAmount = filteringFunction()\n      .flatMap((order) =>\n        order.status === \"REMBOURSEE\" ? order.products : undefined\n      )\n      .filter((i) => i !== undefined)\n      .reduce((acc, amt) => acc - amt._id.price * amt.quantity, 0);\n    return (totalAmount + totalRefundedAmount).toFixed(2);\n  }, [filteringFunction]);\n\n  const users = Array.from(\n    new Set(\n      rawOrders\n        .map((order) => `${order.user.lastname} ${order.user.firstname}`)\n        .filter((i) => i !== undefined)\n    )\n  );\n\n  const dvModes = Array.from(\n    new Set(\n      rawOrders\n        .map((order) => order.deliveryMode)\n        .filter((i) => i !== undefined)\n    )\n  );\n\n  const status = Array.from(\n    new Set(\n      rawOrders.map((order) => order.status).filter((i) => i !== undefined)\n    )\n  );\n\n  const handleChange = useCallback(\n    (e) => {\n      const { name, value } = e.target;\n\n      setArgs({ ...args, [name]: value });\n    },\n    [args]\n  );\n\n  return (\n    <div>\n      <h1>Total des commandes : {rawOrders.length}</h1>\n      <h1>Total des produits filtrés : {filteringFunction().length}</h1>\n      <h2>\n        Total général :{computeTotalAmount()}\n        <small>€</small>\n      </h2>\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          padding: \"12px\",\n        }}\n      >\n        <select name=\"user\" onChange={handleChange}>\n          <option value=\"\">Selectionnez un utilisateur</option>\n          {users &&\n            users.map((user) => (\n              <option key={user} value={user}>\n                {user}\n              </option>\n            ))}\n        </select>\n        <select name=\"deliveryMode\" onChange={handleChange}>\n          <option value=\"\">Selectionnez un mode de livraison</option>\n          {dvModes &&\n            dvModes.map((mode) => (\n              <option key={mode} value={mode}>\n                {mode}\n              </option>\n            ))}\n        </select>\n        <select name=\"status\" onChange={handleChange}>\n          <option value=\"\">Selectionnez status de commande</option>\n          {status &&\n            status.map((sta) => (\n              <option key={sta} value={sta}>\n                {sta}\n              </option>\n            ))}\n        </select>\n        <select name=\"date\" onChange={handleChange}>\n          <option value=\"\">Selectionnez un mois de l'année</option>\n          {generateArrayofMonth().map((month) => (\n            <option key={month} value={month}>\n              {month.toUpperCase()}\n            </option>\n          ))}\n        </select>\n        <select name=\"date\" onChange={handleChange}>\n          <option value=\"\">Selectionnez l'année</option>\n          {generateArrayOfYear().map((year) => (\n            <option key={year} value={year}>\n              {year}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <table style={{ textAlign: \"center\", width: \"100%\" }}>\n          <thead>\n            <tr>\n              <th>utilisateur</th>\n              <th>date</th>\n              <th>mode</th>\n              <th>status</th>\n              <th>montant commande</th>\n              <th>produits commandés</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteringFunction().map((order) => (\n              <tr key={order._id}>\n                <td>\n                  {order.user.lastname} {order.user.firstname}\n                </td>\n                <td>{order.date}</td>\n                <td>{order.deliveryMode}</td>\n                <td>{order.status}</td>\n                <td>\n                  {order && computeAmountOfOrder(order)}\n                  <small>€</small>\n                </td>\n                <td>\n                  <ul style={{ listStyle: \"none\" }}>\n                    {order.products.map(({ _id, quantity }, index) => (\n                      <li key={_id + index} style={{ textAlign: \"center\" }}>\n                        {_id.name} x {quantity}\n                      </li>\n                    ))}\n                  </ul>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminReports;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAllRawOrders } from \"../querries/order.querries\";\nimport { selectUserToken } from \"../redux/reducers/user/user.selectors\";\n\nexport const useFetchAllRawOrders = () => {\n  const token = useSelector(selectUserToken);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchAllRawOrders(token, dispatch);\n  }, [token, dispatch]);\n};\n","import { orderActionTypes } from \"./order.types\";\n\nexport const getOrdersByUserId = (orders) => ({\n  type: orderActionTypes.GET_ORDERS_BY_USER_ID,\n  payload: orders,\n});\n\nexport const getAllOrders = (orders) => ({\n  type: orderActionTypes.GET_ALL_ORDERS,\n  payload: orders,\n});\n\nexport const getAllRawOrders = (orders) => ({\n  type: orderActionTypes.GET_ALL_RAW_ORDERS,\n  payload: orders,\n});\n","import axios from \"axios\";\nimport { setMessage, toggleLoading } from \"../redux/reducers/app/app.actions\";\nimport { emptyCart } from \"../redux/reducers/cart/cart.actions\";\nimport {\n  getAllOrders,\n  getAllRawOrders,\n  getOrdersByUserId,\n} from \"../redux/reducers/order/order.actions\";\nimport { localServerURI } from \"../_consts/server/server\";\n\nexport const fetchOrdersByUserId = async (userId, token, dispatch) => {\n  dispatch(toggleLoading());\n  try {\n    const response = await axios({\n      method: \"GET\",\n      url: `${localServerURI}/api/orders/${userId}`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const {\n      data: { orders, message },\n    } = response;\n    dispatch(toggleLoading());\n    dispatch(getOrdersByUserId(orders));\n    dispatch(setMessage({ status: \"success\", message: message }));\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const fetchAllOrders = async (token, dispatch) => {\n  try {\n    const response = await axios({\n      method: \"GET\",\n      url: `${localServerURI}/api/orders/all`,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    const {\n      data: { orders },\n    } = response;\n\n    dispatch(getAllOrders(orders));\n  } catch (error) {\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const fetchAllRawOrders = async (token, dispatch) => {\n  try {\n    const response = await axios({\n      method: \"GET\",\n      url: `${localServerURI}/api/orders/all-raw`,\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    const {\n      data: { orders },\n    } = response;\n\n    dispatch(getAllRawOrders(orders));\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const createOrder = async (token, order, dispatch, navigate) => {\n  dispatch(toggleLoading());\n  const { products, ...others } = order;\n  let newOrder = {\n    ...others,\n    products: products.map(({ _id, quantity }) => ({ _id, quantity })),\n  };\n  try {\n    const response = await axios({\n      method: \"POST\",\n      url: `${localServerURI}/api/orders/add`,\n      data: { order: newOrder },\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const {\n      data: { message },\n    } = response;\n    dispatch(toggleLoading());\n    dispatch(setMessage({ status: \"success\", message: message }));\n    dispatch(emptyCart());\n    navigate(\"/vos-commandes\");\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n\nexport const updateOrder = async (token, update, dispatch) => {\n  dispatch(toggleLoading());\n  try {\n    const response = await axios({\n      method: \"POST\",\n      url: `${localServerURI}/api/orders/update`,\n      data: { update },\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const {\n      data: { message },\n    } = response;\n    dispatch(toggleLoading());\n    dispatch(setMessage({ status: \"success\", message: message }));\n  } catch (error) {\n    dispatch(toggleLoading());\n    dispatch(\n      setMessage({ status: \"error\", message: error.response.data.message })\n    );\n  }\n};\n","import { createSelector } from \"reselect\";\n\nconst selectOrder = (state) => state.order;\n\nexport const selectOrdersByUserId = createSelector(\n  [selectOrder],\n  (order) => order.userOrders\n);\n\nexport const selectAllOrders = createSelector(\n  [selectOrder],\n  (order) => order.allOrders\n);\n\nexport const selectAllRawOrders = createSelector(\n  [selectOrder],\n  (order) => order.rawOrders\n);\n"],"names":["token","useSelector","selectUserToken","dispatch","useDispatch","useEffect","fetchAllRawOrders","useFetchAllRawOrders","rawOrders","selectAllRawOrders","useState","deliveryMode","status","date","user","args","setArgs","filteringFunction","useCallback","filter","obj","key","undefined","includes","username","computeAmountOfOrder","products","reduce","acc","amt","_id","price","quantity","toFixed","computeTotalAmount","flatMap","order","i","users","Array","from","Set","map","lastname","firstname","dvModes","handleChange","e","target","name","value","length","style","width","display","justifyContent","padding","onChange","mode","sta","item","index","Date","toLocaleDateString","month","getFullYear","toUpperCase","min","max","years","push","generateArrayOfYear","year","textAlign","listStyle","getOrdersByUserId","orders","type","orderActionTypes","payload","getAllOrders","getAllRawOrders","fetchOrdersByUserId","userId","toggleLoading","axios","method","url","localServerURI","headers","Authorization","response","data","message","setMessage","fetchAllOrders","createOrder","navigate","others","newOrder","emptyCart","updateOrder","update","selectOrder","state","selectOrdersByUserId","createSelector","userOrders","selectAllOrders","allOrders"],"sourceRoot":""}