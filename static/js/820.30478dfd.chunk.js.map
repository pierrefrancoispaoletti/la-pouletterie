{"version":3,"file":"static/js/820.30478dfd.chunk.js","mappings":"yUAsBMA,EAAgB,CACpBC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,iBAAkB,GAClBC,kBAAmB,GACnBC,SAAU,IAyHZ,UAtHa,WACX,OAAsCC,EAAAA,EAAAA,UAASR,GAA/C,eAAOS,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAClBC,GAASF,EAAAA,EAAAA,IAAYG,EAAAA,IAArBD,MAERE,EAAAA,EAAAA,YAAU,WACRR,GAAe,kBACVM,GADS,IAEZX,iBAAkBW,EAAKG,QAAQd,iBAC/BC,kBAAmBU,EAAKG,QAAQb,kBAChCC,SAAU,QAEX,CAACS,IAEJ,IAAMI,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdd,GAAe,kBAAKD,GAAN,cAAoBc,EAAOC,MAGrCC,EAAY,mCAAG,WAAOJ,GAAP,8EACnBA,EAAEK,iBADiB,UAEMC,EAAAA,EAAAA,IAAYd,EAAOF,GAFzB,QAEbiB,EAFa,UAIjBC,EAAAA,EAAAA,IAAWD,EAAYnB,EAAaE,GAJnB,2CAAH,sDAoBZmB,EAAgB,mCAAG,qGACEH,EAAAA,EAAAA,IAAYd,EAAOF,GADrB,QACjBiB,EADiB,UAGrBG,EAAAA,EAAAA,IAAWf,EAAKgB,IAAKJ,EAAYjB,GAHZ,2CAAH,qDAMtB,OACE,UAAC,IAAD,YACE,SAAC,IAAD,gCACA,UAAC,IAAD,CAAesB,SAAUR,EAAzB,WACE,SAAC,IAAD,CACES,KAAK,OACLX,KAAK,YACLY,MAAM,YACNX,MAAOf,EAAYR,UACnBmB,aAAcA,KAEhB,SAAC,IAAD,CACEc,KAAK,OACLX,KAAK,WACLY,MAAM,MACNX,MAAOf,EAAYP,SACnBkB,aAAcA,KAEhB,SAAC,IAAD,CACEc,KAAK,QACLX,KAAK,QACLY,MAAM,QACNX,MAAOf,EAAYN,MACnBiB,aAAcA,KAEhB,SAAC,IAAD,CACEc,KAAK,OACLX,KAAK,QACLY,MAAM,wBACNX,MAAOf,EAAYL,MACnBgB,aAAcA,KAEhB,SAAC,IAAD,CACEc,KAAK,OACLX,KAAK,mBACLY,MAAM,UACNX,MAAOf,EAAYJ,iBACnBe,aAAcA,KAEhB,SAAC,IAAD,CACEc,KAAK,OACLX,KAAK,oBACLY,MAAM,cACNX,MAAOf,EAAYH,kBACnBc,aAAcA,KAEhB,SAAC,IAAD,CACEgB,aAAa,MACbF,KAAK,WACLX,KAAK,WACLY,MAAM,eACNX,MAAOf,EAAYF,SACnBa,aAAcA,KAEhB,SAAC,IAAD,CAAciB,UAAQ,EAACH,KAAK,SAA5B,oCAIF,4BACE,UAAC,IAAD,CAAcI,UAAQ,EAACJ,KAAK,SAASK,QAAS,kBA5ElD5B,GAAS6B,EAAAA,EAAAA,MACT7B,GAAS8B,EAAAA,EAAAA,OACT9B,GAAS+B,EAAAA,EAAAA,GAAgB,UACzB/B,GACEgC,EAAAA,EAAAA,IAAW,CACTC,OAAQ,UACRC,QAAS,mDAsET,WACE,SAAC,IAAD,CAAiBC,KAAMC,EAAAA,IAAYC,KAAK,QACxC,mDAEF,UAAC,IAAD,CAAcV,UAAQ,EAACJ,KAAK,SAASK,QAAS,kBAAMT,KAApD,WACE,SAAC,IAAD,CAAiBgB,KAAMG,EAAAA,IAAYD,KAAK,QACxC","sources":["pages/User/User.js"],"sourcesContent":["import { faDoorOpen, faTrashAlt } from \"@fortawesome/pro-duotone-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CategoryTitle from \"../../components/CategoryTitle/CategoryTitle\";\nimport CustomButton from \"../../components/CustoButton/CustomButton\";\nimport TextInput from \"../../components/TextInput/TextInput\";\nimport {\n  deleteUser,\n  updateUser,\n  verifyToken,\n} from \"../../querries/auth.querries\";\nimport { setMessage } from \"../../redux/reducers/app/app.actions\";\nimport { emptyCart } from \"../../redux/reducers/cart/cart.actions\";\nimport { setClientSecret } from \"../../redux/reducers/payment/payment.actions\";\nimport { logout } from \"../../redux/reducers/user/user.actions\";\nimport {\n  selectUserToken,\n  selectUserTokenDecoded,\n} from \"../../redux/reducers/user/user.selectors\";\nimport { FormContainer, LoginContainer } from \"../Login/login.style\";\n\nconst INITIAL_STATE = {\n  firstname: \"\",\n  lastname: \"\",\n  email: \"\",\n  phone: \"\",\n  addressFirstLine: \"\",\n  addressComplement: \"\",\n  password: \"\",\n};\n\nconst User = () => {\n  const [updatedUser, setUpdatedUser] = useState(INITIAL_STATE);\n  const dispatch = useDispatch();\n  const token = useSelector(selectUserToken);\n  const { user } = useSelector(selectUserTokenDecoded);\n\n  useEffect(() => {\n    setUpdatedUser({\n      ...user,\n      addressFirstLine: user.address.addressFirstLine,\n      addressComplement: user.address.addressComplement,\n      password: \"\",\n    });\n  }, [user]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUpdatedUser({ ...updatedUser, [name]: value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const validToken = await verifyToken(token, dispatch);\n    if (validToken) {\n      updateUser(validToken, updatedUser, dispatch);\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n    dispatch(emptyCart());\n    dispatch(setClientSecret(\"\"));\n    dispatch(\n      setMessage({\n        status: \"success\",\n        message: \"Déconexion efféctuée avec succés\",\n      })\n    );\n  };\n\n  const handleDeleteUser = async () => {\n    const validToken = await verifyToken(token, dispatch);\n    if (validToken) {\n      deleteUser(user._id, validToken, dispatch);\n    }\n  };\n  return (\n    <LoginContainer>\n      <CategoryTitle>Mes Informations</CategoryTitle>\n      <FormContainer onSubmit={handleSubmit}>\n        <TextInput\n          type=\"text\"\n          name=\"firstname\"\n          label=\"Prénom\"\n          value={updatedUser.firstname}\n          handleChange={handleChange}\n        />\n        <TextInput\n          type=\"text\"\n          name=\"lastname\"\n          label=\"Nom\"\n          value={updatedUser.lastname}\n          handleChange={handleChange}\n        />\n        <TextInput\n          type=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={updatedUser.email}\n          handleChange={handleChange}\n        />\n        <TextInput\n          type=\"text\"\n          name=\"phone\"\n          label=\"N° de télephone\"\n          value={updatedUser.phone}\n          handleChange={handleChange}\n        />\n        <TextInput\n          type=\"text\"\n          name=\"addressFirstLine\"\n          label=\"Adresse\"\n          value={updatedUser.addressFirstLine}\n          handleChange={handleChange}\n        />\n        <TextInput\n          type=\"text\"\n          name=\"addressComplement\"\n          label=\"Code Postal\"\n          value={updatedUser.addressComplement}\n          handleChange={handleChange}\n        />\n        <TextInput\n          autocomplete=\"off\"\n          type=\"password\"\n          name=\"password\"\n          label=\"Mot de passe\"\n          value={updatedUser.password}\n          handleChange={handleChange}\n        />\n        <CustomButton positive type=\"submit\">\n          Modifier mes Infos\n        </CustomButton>\n      </FormContainer>\n      <div>\n        <CustomButton negative type=\"button\" onClick={() => handleLogout()}>\n          <FontAwesomeIcon icon={faDoorOpen} size=\"1x\" />\n          <span> Me deconnecter </span>\n        </CustomButton>\n        <CustomButton negative type=\"button\" onClick={() => handleDeleteUser()}>\n          <FontAwesomeIcon icon={faTrashAlt} size=\"1x\" />\n          <span> Supprimer mon compte </span>\n        </CustomButton>\n      </div>\n    </LoginContainer>\n  );\n};\n\nexport default User;\n"],"names":["INITIAL_STATE","firstname","lastname","email","phone","addressFirstLine","addressComplement","password","useState","updatedUser","setUpdatedUser","dispatch","useDispatch","token","useSelector","selectUserToken","user","selectUserTokenDecoded","useEffect","address","handleChange","e","target","name","value","handleSubmit","preventDefault","verifyToken","validToken","updateUser","handleDeleteUser","deleteUser","_id","onSubmit","type","label","autocomplete","positive","negative","onClick","logout","emptyCart","setClientSecret","setMessage","status","message","icon","faDoorOpen","size","faTrashAlt"],"sourceRoot":""}